datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  password           UserPassword?
  gameProjectMembers GameProjectMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPassword {
  user_id       String @id
  password_hash String
  user          User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model GameProject {
  id                 String              @id @default(cuid())
  name               String
  apiKey             String              @unique
  insertDate         DateTime            @default(now())
  gameProjectMembers GameProjectMember[]
  testsRuns          TestRun[]
}

model GameProjectMember {
  gameProjectId String
  userId        String
  accessLevel   String      @default("Admin")
  gameProject   GameProject @relation(fields: [gameProjectId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([gameProjectId, userId])
}

model TestRun {
  id            String       @id @default(cuid())
  total         Int
  success       Int
  failed        Int
  gameProjectId String
  insertDate    DateTime     @default(now())
  gameProject   GameProject  @relation(fields: [gameProjectId], references: [id], onDelete: Cascade)
  testsResults  TestResult[]
}

model TestResult {
  id                  String  @id @default(cuid())
  testRunId           String
  testFile            String
  isSuccess           Boolean
  errorMessage        String?
  recordingFileBase64 String  @db.VarChar(MAX)
  performanceJson     String? @db.VarChar(MAX)
  testRun             TestRun @relation(fields: [testRunId], references: [id], onDelete: Cascade)
}
